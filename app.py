import os
import uuid
from typing import List, Optional

import streamlit as st
from streamlit_pdf_viewer import pdf_viewer

from atomic_sovus.chain import RelevantFAQ, RelevantManual, get_relevant_faq, get_relevant_manuals
from atomic_sovus.settings import N_PAGES

st.title("üöÄ –Ø —á–∞—Ç-–±–æ—Ç –∏ –∑–Ω–∞—é –≤—Å–µ –æ–± ¬´1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ¬ª")
st.caption("üí¨ –ß–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": ":wave: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"}]
if "state" not in st.session_state:
    st.session_state.state = 1
if "input_disabled" not in st.session_state:
    st.session_state.input_disabled = False


def increment_state() -> None:
    if st.session_state.state == 1:
        enable_input()
    st.session_state.state += 1


def start_again(input_: Optional[str] = None) -> None:
    st.session_state.state = 1
    enable_input()
    st.session_state.messages.append({"role": "assistant", "content": "–ß–µ–º —è –µ—â–µ –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å :relieved:?"})
    st.toast(input_)


def disable_input() -> None:
    st.session_state.input_disabled = True


def enable_input() -> None:
    st.session_state.input_disabled = False


def render_manuals(manuals: List[RelevantManual], with_pdf: bool = True) -> None:
    for manual in manuals:
        popover_title = manual.titlename
        with st.popover(popover_title, use_container_width=True):
            if with_pdf:
                filename = manual.filename
                filepath = os.path.join("data/pdf/", filename)
                pdf_viewer(
                    filepath,
                    height=400,
                    pages_to_render=list(range(manual.page, manual.page + N_PAGES)),
                    key=str(uuid.uuid4()),
                )


def render_faqs(faqs: List[RelevantFAQ]) -> None:
    for faq in faqs:
        with st.expander(faq.question):
            st.write(faq.answer)


def render_chat_history() -> None:
    for msg in st.session_state.messages:
        if "manuals" in msg:
            st.chat_message(msg["role"]).write(msg["content"])
            render_manuals(msg["manuals"], with_pdf=False)
        elif "faqs" in msg:
            st.chat_message(msg["role"]).write(msg["content"])
            render_faqs(msg["faqs"])
        else:
            st.chat_message(msg["role"]).write(msg["content"])


def clear_chat_history() -> None:
    del st.session_state.messages


render_chat_history()

if st.session_state.state == 1:
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", disabled=st.session_state.input_disabled, on_submit=disable_input):
        st.chat_message("user").write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})

        manuals = get_relevant_manuals(prompt)

        st.chat_message("assistant").write(":closed_book: –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏")
        st.session_state.messages.append(
            {"role": "assistant", "content": ":closed_book: –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏", "manuals": manuals}
        )

        render_manuals(manuals)

        st.chat_message("assistant").write("–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:")
        st.session_state.messages.append({"role": "assistant", "content": "–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:"})
        st.button("–î–∞, —Å–ø–∞—Å–∏–±–æ!", on_click=start_again, kwargs={"input_": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ :wink:"})
        st.button("–ù–µ—Ç", on_click=increment_state)

if st.session_state.state == 2:
    st.chat_message("assistant").write(
        "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è... :disappointed:\n–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å —á—Ç–æ–±—ã —è –ø–æ–ø—ã—Ç–∞–ª—Å—è –µ—â–µ —Ä–∞–∑"
    )
    st.session_state.messages.append(
        {
            "role": "assistant",
            "content": "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è... :disappointed:\n–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å —á—Ç–æ–±—ã —è –ø–æ–ø—ã—Ç–∞–ª—Å—è –µ—â–µ —Ä–∞–∑",
        }
    )
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", disabled=st.session_state.input_disabled, on_submit=disable_input):
        st.chat_message("user").write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})
        manuals = get_relevant_manuals(prompt)

        st.chat_message("assistant").write(":closed_book: –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —è –µ—â–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏!")
        st.session_state.messages.append(
            {"role": "assistant", "content": ":closed_book: –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —è –µ—â–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏!", "manuals": manuals}
        )

        render_manuals(manuals)

        st.chat_message("assistant").write("–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:")
        st.session_state.messages.append({"role": "assistant", "content": "–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:"})
        st.button("–î–∞, —Å–ø–∞—Å–∏–±–æ!", on_click=start_again, kwargs={"input_": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ :wink:"})
        st.button("–ù–µ—Ç", on_click=increment_state)

if st.session_state.state == 3:
    last_prompt = [msg["content"] for msg in st.session_state.messages if msg["role"] == "user"][-1]
    faqs = get_relevant_faq(last_prompt)
    st.chat_message("assistant").write("–°–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–ª–∏ –í–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏ :clipboard:")
    st.session_state.messages.append(
        {
            "role": "assistant",
            "content": "–°–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–ª–∏ –í–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏ :clipboard:",
            "faqs": faqs,
        }
    )
    render_faqs(faqs)
    st.chat_message("assistant").write("–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:")
    st.session_state.messages.append({"role": "assistant", "content": "–Ø —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å? :wink:"})
    st.button("–î–∞, —Å–ø–∞—Å–∏–±–æ!", on_click=start_again, kwargs={"input_": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ :wink:"})
    st.button("–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", on_click=increment_state)

if st.session_state.state == 4:
    with st.form(key=str(uuid.uuid4())):
        ticket_type = st.selectbox(
            "–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è",
            (
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ",
                "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –±—É –∏ –Ω—É",
                "–ó–∞–¥–∞–Ω–∏–µ",
                "–ó–∞–ø—Ä–æ—Å",
                "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
                "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                "–ò–Ω—Ü–∏–¥–µ–Ω—Ç",
                "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                "–ü—Ä–µ—Ç–µ–Ω–∑–∏—è",
                "–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            ),
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è",
        )

        ticket_name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        ticket_text = st.text_input("–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è")
        st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", on_click=start_again, kwargs={"input_": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
